# Generated by Django 5.2 on 2025-05-01 09:01

import django.core.validators
import django.db.models.deletion
import incidents.models
from django.db import migrations, models

def replace_existing_incidents_status(apps, schema_editon):
    Incident = apps.get_model("incidents", "Incident")
    IncidentStatus = apps.get_model("incidents", "IncidentStatus")
    Label = apps.get_model("incidents", "Label")
    LabelGroup = apps.get_model("incidents", "LabelGroup")
    status_map = {}

    if Incident.objects.count() == 0:
        return

    action = LabelGroup.objects.get(name="action")

    label = Label.objects.get(name="Opened", group=action)
    label.name = "Open"
    label.save()
    status_obj = IncidentStatus.objects.create(
        name="Open",
        icon="bi-fire",
        flag="initial",
        associated_action=label,
    )
    status_map["O"] = status_obj.id

    label = Label.objects.get(name="Blocked", group=action)
    label.name = "Block"
    label.save()
    status_obj = IncidentStatus.objects.create(
        name="Blocked",
        icon="bi-ban",
        associated_action=label,
    )
    status_map["B"] = status_obj.id

    label = Label.objects.get(name="Closed", group=action)
    label.name = "Close"
    label.save()
    status_obj = IncidentStatus.objects.create(
        name="Closed",
        icon="bi-check-circle",
        flag="final",
        associated_action=label,
    )
    status_map["C"] = status_obj.id

    for s in Incident.objects.values_list("status", flat=True).distinct():
        if not s in status_map:
            l, _ = Label.objects.get_or_create(name=s, group=action)
            status_obj = IncidentStatus.objects.create(
                name=s,
                icon="bi-clouds",
                associated_action=l,
            )
            status_map[s] = status_obj.id

    for i in Incident.objects.all():
        i.status = status_map[i.status]
        i.save()


class Migration(migrations.Migration):

    dependencies = [
        ('incidents', '0014_alter_incident_date_alter_log_comment_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='severitychoice',
            name='name',
            field=models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('[a-zA-Z0-9]+')]),
        ),
        migrations.CreateModel(
            name='IncidentStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('"', inverse_match=True)])),
                ('icon', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^[-_A-Za-z0-9]*$')])),
                ('flag', models.CharField(blank=True, choices=[('initial', 'Initial status'), ('final', 'Final status')], max_length=50, null=True)),
                ('associated_action', models.ForeignKey(blank=True, limit_choices_to={'group__name': 'action'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_action_label', to='incidents.label')),
            ],
            options={
                'verbose_name_plural': 'Incident statuses',
            },
        ),
        migrations.RunPython(replace_existing_incidents_status),
        migrations.AlterField(
            model_name='incident',
            name='status',
            field=models.ForeignKey(default=incidents.models.get_initial_status, on_delete=django.db.models.deletion.CASCADE, to='incidents.incidentstatus'),
        ),
    ]
